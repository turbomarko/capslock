volumes:
  capslock_local_postgres_data: {}
  capslock_local_postgres_data_backups: {}
  capslock_local_redis_data: {}

services:
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    image: capslock_local_frontend
    container_name: capslock_local_frontend
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
    networks:
      - capslock_network

  analytics: &analytics
    build:
      context: ./analytics
      dockerfile: ./compose/local/django/Dockerfile
    image: capslock_local_analytics
    container_name: capslock_local_analytics
    depends_on:
      - postgres
      - redis
      - mailpit
      - rabbitmq
    volumes:
      - ./analytics:/app:z
    env_file:
      - ./analytics/.envs/.local/.django
      - ./analytics/.envs/.local/.postgres
    ports:
      - '8000:8000'
    command: /start

  postgres:
    build:
      context: ./analytics
      dockerfile: ./compose/local/postgres/Dockerfile
    image: capslock_local_postgres
    container_name: capslock_local_postgres
    volumes:
      - capslock_local_postgres_data:/var/lib/postgresql/data
      - capslock_local_postgres_data_backups:/backups
    env_file:
      - ./analytics/.envs/.local/.postgres
    ports:
      - '5432:5432'

  mailpit:
    image: docker.io/axllent/mailpit:latest
    container_name: capslock_local_mailpit
    ports:
      - '8025:8025'

  redis:
    image: docker.io/redis:6
    container_name: capslock_local_redis
    volumes:
      - capslock_local_redis_data:/data

  celeryworker:
    <<: *analytics
    image: capslock_local_celeryworker
    container_name: capslock_local_celeryworker
    depends_on:
      - redis
      - postgres
      - mailpit
      - rabbitmq
    ports: []
    command: /start-celeryworker

  celerybeat:
    <<: *analytics
    image: capslock_local_celerybeat
    container_name: capslock_local_celerybeat
    depends_on:
      - redis
      - postgres
      - mailpit
    ports: []
    command: /start-celerybeat

  flower:
    <<: *analytics
    image: capslock_local_flower
    container_name: capslock_local_flower
    ports:
      - '5555:5555'
    command: /start-flower

  notifications:
    build:
      context: ./notifications
      dockerfile: compose/local/Dockerfile
    image: capslock_local_notifications
    container_name: capslock_local_notifications
    volumes:
      - ./notifications:/app
    env_file:
      - ./notifications/.envs/.local/.notifications
    ports:
      - "8001:8000"
    depends_on:
      rabbitmq:
        condition: service_healthy
      mailpit:
        condition: service_started
    networks:
      - capslock_network

  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: capslock_local_rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - capslock_network

  llm:
    build:
      context: ./llm
      dockerfile: compose/local/Dockerfile
    image: capslock_local_llm
    container_name: capslock_local_llm
    volumes:
      - ./llm:/app
    env_file:
      - ./llm/.envs/.local/.llm
    ports:
      - "8002:8000"
    networks:
      - capslock_network

networks:
  capslock_network:
    driver: bridge
